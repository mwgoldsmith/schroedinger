<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="schroedinger-schroencoder">
<refmeta>
<refentrytitle role="top_of_page" id="schroedinger-schroencoder.top_of_page">schroencoder</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  SCHROEDINGER Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>schroencoder</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="schroedinger-schroencoder.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>struct              <link linkend="SchroEncoder">SchroEncoder</link>;
struct              <link linkend="SchroEncoderFrame">SchroEncoderFrame</link>;
enum                <link linkend="SchroEncoderFrameStateEnum">SchroEncoderFrameStateEnum</link>;
enum                <link linkend="SchroEncoderPerceptualEnum">SchroEncoderPerceptualEnum</link>;
enum                <link linkend="SchroQuantiserEngineEnum">SchroQuantiserEngineEnum</link>;
enum                <link linkend="SchroStateEnum">SchroStateEnum</link>;
enum                <link linkend="SchroEncoderGOPEnum">SchroEncoderGOPEnum</link>;
enum                <link linkend="SchroEncoderRateControlEnum">SchroEncoderRateControlEnum</link>;
struct              <link linkend="SchroEncoderSetting">SchroEncoderSetting</link>;
enum                <link linkend="SchroEncoderSettingTypeEnum">SchroEncoderSettingTypeEnum</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="SchroEngineIterateFunc">*SchroEngineIterateFunc</link>)           (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="SchroEncoder"><returnvalue>SchroEncoder</returnvalue></link> *      <link linkend="schro-encoder-new">schro_encoder_new</link>                   (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-free">schro_encoder_free</link>                  (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="SchroVideoFormat"><returnvalue>SchroVideoFormat</returnvalue></link> *  <link linkend="schro-encoder-get-video-format">schro_encoder_get_video_format</link>      (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-set-video-format">schro_encoder_set_video_format</link>      (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroVideoFormat"><type>SchroVideoFormat</type></link> *video_format</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-end-of-stream">schro_encoder_end_of_stream</link>         (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-push-frame">schro_encoder_push_frame</link>            (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroFrame"><type>SchroFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-encode-parse-info">schro_encoder_encode_parse_info</link>     (<parameter><link linkend="SchroPack"><type>SchroPack</type></link> *bits</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> parse_code</parameter>);
<link linkend="SchroBuffer"><returnvalue>SchroBuffer</returnvalue></link> *       <link linkend="schro-encoder-pull">schro_encoder_pull</link>                  (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *n_decodable_frames</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-analyse-picture">schro_encoder_analyse_picture</link>       (<parameter><link linkend="SchroAsyncStage"><type>SchroAsyncStage</type></link> *stage</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-calculate-subband-weights">schro_encoder_calculate_subband_weights</link>
                                                        (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> (*perceptual_weight) (double)</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-calculate-test-info">schro_encoder_calculate_test_info</link>   (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-choose-quantisers">schro_encoder_choose_quantisers</link>     (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-clean-up-transform">schro_encoder_clean_up_transform</link>    (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="SchroBuffer"><returnvalue>SchroBuffer</returnvalue></link> *       <link linkend="schro-encoder-encode-auxiliary-data">schro_encoder_encode_auxiliary_data</link> (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroAuxiliaryDataID"><type>SchroAuxiliaryDataID</type></link> id</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> size</parameter>);
<link linkend="SchroBuffer"><returnvalue>SchroBuffer</returnvalue></link> *       <link linkend="schro-encoder-encode-end-of-stream">schro_encoder_encode_end_of_stream</link>  (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-encode-lowdelay-transform-data">schro_encoder_encode_lowdelay_transform_data</link>
                                                        (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-encode-picture">schro_encoder_encode_picture</link>        (<parameter><link linkend="SchroAsyncStage"><type>SchroAsyncStage</type></link> *stage</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-encode-picture-header">schro_encoder_encode_picture_header</link> (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-encode-subband">schro_encoder_encode_subband</link>        (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> component</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> index</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-encode-subband-noarith">schro_encoder_encode_subband_noarith</link>
                                                        (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> component</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> index</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="schro-encoder-engine-backref">schro_encoder_engine_backref</link>        (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="schro-encoder-engine-backtest">schro_encoder_engine_backtest</link>       (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="schro-encoder-engine-intra-only">schro_encoder_engine_intra_only</link>     (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="schro-encoder-engine-lossless">schro_encoder_engine_lossless</link>       (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="schro-encoder-engine-lowdelay">schro_encoder_engine_lowdelay</link>       (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="schro-encoder-engine-test-intra">schro_encoder_engine_test_intra</link>     (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-estimate-entropy">schro_encoder_estimate_entropy</link>      (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-frame-analyse">schro_encoder_frame_analyse</link>         (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-frame-downsample">schro_encoder_frame_downsample</link>      (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-frame-insert-buffer">schro_encoder_frame_insert_buffer</link>   (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>,
                                                         <parameter><link linkend="SchroBuffer"><type>SchroBuffer</type></link> *buffer</parameter>);
<link linkend="SchroEncoderFrame"><returnvalue>SchroEncoderFrame</returnvalue></link> * <link linkend="schro-encoder-frame-new">schro_encoder_frame_new</link>             (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="SchroFrame"><returnvalue>SchroFrame</returnvalue></link> *        <link linkend="schro-encoder-frame-queue-get">schro_encoder_frame_queue_get</link>       (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroPictureNumber"><type>SchroPictureNumber</type></link> frame_number</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-frame-queue-remove">schro_encoder_frame_queue_remove</link>    (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroPictureNumber"><type>SchroPictureNumber</type></link> frame_number</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-frame-ref">schro_encoder_frame_ref</link>             (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-frame-unref">schro_encoder_frame_unref</link>           (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-init-subbands">schro_encoder_init_subbands</link>         (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-insert-buffer">schro_encoder_insert_buffer</link>         (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroBuffer"><type>SchroBuffer</type></link> *buffer</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-output-push">schro_encoder_output_push</link>           (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroBuffer"><type>SchroBuffer</type></link> *buffer</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> slot</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> presentation_frame</parameter>);
<link linkend="double"><returnvalue>double</returnvalue></link>              <link linkend="schro-encoder-perceptual-weight-ccir959">schro_encoder_perceptual_weight_ccir959</link>
                                                        (<parameter><link linkend="double"><type>double</type></link> cpd</parameter>);
<link linkend="double"><returnvalue>double</returnvalue></link>              <link linkend="schro-encoder-perceptual-weight-constant">schro_encoder_perceptual_weight_constant</link>
                                                        (<parameter><link linkend="double"><type>double</type></link> cpd</parameter>);
<link linkend="double"><returnvalue>double</returnvalue></link>              <link linkend="schro-encoder-perceptual-weight-moo">schro_encoder_perceptual_weight_moo</link> (<parameter><link linkend="double"><type>double</type></link> cpd</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-postanalyse-picture">schro_encoder_postanalyse_picture</link>   (<parameter><link linkend="SchroAsyncStage"><type>SchroAsyncStage</type></link> *stage</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="schro-encoder-push-ready">schro_encoder_push_ready</link>            (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-recalculate-allocations">schro_encoder_recalculate_allocations</link>
                                                        (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-reconstruct-picture">schro_encoder_reconstruct_picture</link>   (<parameter><link linkend="SchroAsyncStage"><type>SchroAsyncStage</type></link> *stage</parameter>);
<link linkend="SchroEncoderFrame"><returnvalue>SchroEncoderFrame</returnvalue></link> * <link linkend="schro-encoder-reference-get">schro_encoder_reference_get</link>         (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroPictureNumber"><type>SchroPictureNumber</type></link> frame_number</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-set-default-subband-weights">schro_encoder_set_default_subband_weights</link>
                                                        (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-start">schro_encoder_start</link>                 (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="SchroStateEnum"><returnvalue>SchroStateEnum</returnvalue></link>      <link linkend="schro-encoder-wait">schro_encoder_wait</link>                  (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="schro-encoder-get-n-settings">schro_encoder_get_n_settings</link>        (<parameter><type>void</type></parameter>);
const <link linkend="SchroEncoderSetting"><returnvalue>SchroEncoderSetting</returnvalue></link> * <link linkend="schro-encoder-get-setting-info">schro_encoder_get_setting_info</link>
                                                        (<parameter><link linkend="int"><type>int</type></link> i</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-global-estimation">schro_encoder_global_estimation</link>     (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-init-error-tables">schro_encoder_init_error_tables</link>     (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-phasecorr-estimation">schro_encoder_phasecorr_estimation</link>  (<parameter><link linkend="SchroPhaseCorr"><type>SchroPhaseCorr</type></link> *pc</parameter>);
<link linkend="double"><returnvalue>double</returnvalue></link>              <link linkend="schro-encoder-setting-get-double">schro_encoder_setting_get_double</link>    (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="schro-encoder-setting-set-double">schro_encoder_setting_set_double</link>    (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> d</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="schroedinger-schroencoder.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="schroedinger-schroencoder.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="SchroEncoder" role="struct">
<title>struct SchroEncoder</title>
<indexterm zone="SchroEncoder"><primary>SchroEncoder</primary></indexterm>
<programlisting>struct SchroEncoder {
};
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroEncoderFrame" role="struct">
<title>struct SchroEncoderFrame</title>
<indexterm zone="SchroEncoderFrame"><primary>SchroEncoderFrame</primary></indexterm>
<programlisting>struct SchroEncoderFrame {
};
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroEncoderFrameStateEnum" role="enum">
<title>enum SchroEncoderFrameStateEnum</title>
<indexterm zone="SchroEncoderFrameStateEnum"><primary>SchroEncoderFrameStateEnum</primary></indexterm>
<programlisting>typedef enum {
  SCHRO_ENCODER_FRAME_STAGE_NEW = 0,
  SCHRO_ENCODER_FRAME_STAGE_ANALYSE,
  SCHRO_ENCODER_FRAME_STAGE_SC_DETECT_1,
  SCHRO_ENCODER_FRAME_STAGE_SC_DETECT_2,
  SCHRO_ENCODER_FRAME_STAGE_HAVE_GOP,
  SCHRO_ENCODER_FRAME_STAGE_HAVE_PARAMS,
  SCHRO_ENCODER_FRAME_STAGE_PREDICT_ROUGH,
  SCHRO_ENCODER_FRAME_STAGE_PREDICT_PEL,
  SCHRO_ENCODER_FRAME_STAGE_PREDICT_SUBPEL,
  SCHRO_ENCODER_FRAME_STAGE_MODE_DECISION,
  SCHRO_ENCODER_FRAME_STAGE_HAVE_REFS,
  SCHRO_ENCODER_FRAME_STAGE_HAVE_QUANTS,
  SCHRO_ENCODER_FRAME_STAGE_ENCODING,
  SCHRO_ENCODER_FRAME_STAGE_RECONSTRUCT,
  SCHRO_ENCODER_FRAME_STAGE_POSTANALYSE,
  SCHRO_ENCODER_FRAME_STAGE_DONE,
  SCHRO_ENCODER_FRAME_STAGE_FREE,
  SCHRO_ENCODER_FRAME_STAGE_LAST /* this should be last */
} SchroEncoderFrameStateEnum;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroEncoderPerceptualEnum" role="enum">
<title>enum SchroEncoderPerceptualEnum</title>
<indexterm zone="SchroEncoderPerceptualEnum"><primary>SchroEncoderPerceptualEnum</primary></indexterm>
<programlisting>typedef enum {
  SCHRO_ENCODER_PERCEPTUAL_CONSTANT,
  SCHRO_ENCODER_PERCEPTUAL_CCIR959,
  SCHRO_ENCODER_PERCEPTUAL_MOO,
  SCHRO_ENCODER_PERCEPTUAL_MANOS_SAKRISON
} SchroEncoderPerceptualEnum;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroQuantiserEngineEnum" role="enum">
<title>enum SchroQuantiserEngineEnum</title>
<indexterm zone="SchroQuantiserEngineEnum"><primary>SchroQuantiserEngineEnum</primary></indexterm>
<programlisting>typedef enum {
  SCHRO_QUANTISER_ENGINE_SIMPLE,
  SCHRO_QUANTISER_ENGINE_RDO_BIT_ALLOCATION,
  SCHRO_QUANTISER_ENGINE_CBR,
  SCHRO_QUANTISER_ENGINE_LOSSLESS,
  SCHRO_QUANTISER_ENGINE_LOWDELAY,
  SCHRO_QUANTISER_ENGINE_RDO_LAMBDA,
  SCHRO_QUANTISER_ENGINE_CONSTANT_ERROR
} SchroQuantiserEngineEnum;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroStateEnum" role="enum">
<title>enum SchroStateEnum</title>
<indexterm zone="SchroStateEnum"><primary>SchroStateEnum</primary></indexterm>
<programlisting>typedef enum {
  SCHRO_STATE_NEED_FRAME,
  SCHRO_STATE_HAVE_BUFFER,
  SCHRO_STATE_AGAIN,
  SCHRO_STATE_END_OF_STREAM
} SchroStateEnum;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroEncoderGOPEnum" role="enum">
<title>enum SchroEncoderGOPEnum</title>
<indexterm zone="SchroEncoderGOPEnum"><primary>SchroEncoderGOPEnum</primary></indexterm>
<programlisting>typedef enum {
  SCHRO_ENCODER_GOP_ADAPTIVE,
  SCHRO_ENCODER_GOP_INTRA_ONLY,
  SCHRO_ENCODER_GOP_BACKREF,
  SCHRO_ENCODER_GOP_CHAINED_BACKREF,
  SCHRO_ENCODER_GOP_BIREF,
  SCHRO_ENCODER_GOP_CHAINED_BIREF,
} SchroEncoderGOPEnum;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroEncoderRateControlEnum" role="enum">
<title>enum SchroEncoderRateControlEnum</title>
<indexterm zone="SchroEncoderRateControlEnum"><primary>SchroEncoderRateControlEnum</primary></indexterm>
<programlisting>typedef enum {
  SCHRO_ENCODER_RATE_CONTROL_CONSTANT_NOISE_THRESHOLD,
  SCHRO_ENCODER_RATE_CONTROL_CONSTANT_BITRATE,
  SCHRO_ENCODER_RATE_CONTROL_LOW_DELAY,
  SCHRO_ENCODER_RATE_CONTROL_LOSSLESS,
  SCHRO_ENCODER_RATE_CONTROL_CONSTANT_LAMBDA,
  SCHRO_ENCODER_RATE_CONTROL_CONSTANT_ERROR,
  SCHRO_ENCODER_RATE_CONTROL_CONSTANT_QUALITY
} SchroEncoderRateControlEnum;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroEncoderSetting" role="struct">
<title>struct SchroEncoderSetting</title>
<indexterm zone="SchroEncoderSetting"><primary>SchroEncoderSetting</primary></indexterm>
<programlisting>struct SchroEncoderSetting {
  const char *name;
  SchroEncoderSettingTypeEnum type;

  double min;
  double max;
  double default_value;

  const char **enum_list;
};
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroEncoderSettingTypeEnum" role="enum">
<title>enum SchroEncoderSettingTypeEnum</title>
<indexterm zone="SchroEncoderSettingTypeEnum"><primary>SchroEncoderSettingTypeEnum</primary></indexterm>
<programlisting>typedef enum {
  SCHRO_ENCODER_SETTING_TYPE_BOOLEAN,
  SCHRO_ENCODER_SETTING_TYPE_INT,
  SCHRO_ENCODER_SETTING_TYPE_ENUM,
  SCHRO_ENCODER_SETTING_TYPE_DOUBLE,
  SCHRO_ENCODER_SETTING_TYPE_LAST
} SchroEncoderSettingTypeEnum;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SchroEngineIterateFunc" role="function">
<title>SchroEngineIterateFunc ()</title>
<indexterm zone="SchroEngineIterateFunc"><primary>SchroEngineIterateFunc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*SchroEngineIterateFunc)           (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-new" role="function">
<title>schro_encoder_new ()</title>
<indexterm zone="schro-encoder-new"><primary>schro_encoder_new</primary></indexterm>
<programlisting><link linkend="SchroEncoder"><returnvalue>SchroEncoder</returnvalue></link> *      schro_encoder_new                   (<parameter><type>void</type></parameter>);</programlisting>
<para>
Create a new encoder object.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a new encoder object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-free" role="function">
<title>schro_encoder_free ()</title>
<indexterm zone="schro-encoder-free"><primary>schro_encoder_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_free                  (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
Frees an encoder object and all its resources.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-get-video-format" role="function">
<title>schro_encoder_get_video_format ()</title>
<indexterm zone="schro-encoder-get-video-format"><primary>schro_encoder_get_video_format</primary></indexterm>
<programlisting><link linkend="SchroVideoFormat"><returnvalue>SchroVideoFormat</returnvalue></link> *  schro_encoder_get_video_format      (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
Creates a new SchroVideoFormat structure and copies the
video format information of <parameter>decoder</parameter> into it.
</para>
<para>
When no longer needed, the returned pointer should be
freed using <link linkend="free"><function>free()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a pointer to a SchroVideoFormat structure</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-set-video-format" role="function">
<title>schro_encoder_set_video_format ()</title>
<indexterm zone="schro-encoder-set-video-format"><primary>schro_encoder_set_video_format</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_set_video_format      (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroVideoFormat"><type>SchroVideoFormat</type></link> *video_format</parameter>);</programlisting>
<para>
Sets the video format used by <parameter>encoder</parameter> to the values specified
in <parameter>format</parameter>.  This function may only be called before <link linkend="schro-encoder-start"><function>schro_encoder_start()</function></link>
is called on the encoder.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-end-of-stream" role="function">
<title>schro_encoder_end_of_stream ()</title>
<indexterm zone="schro-encoder-end-of-stream"><primary>schro_encoder_end_of_stream</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_end_of_stream         (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
Tells the encoder that the end of the stream has been reached, and
no more frames are available to encode.  The encoder will then
finish encoding.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-push-frame" role="function">
<title>schro_encoder_push_frame ()</title>
<indexterm zone="schro-encoder-push-frame"><primary>schro_encoder_push_frame</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_push_frame            (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroFrame"><type>SchroFrame</type></link> *frame</parameter>);</programlisting>
<para>
Provides a frame to the encoder to encode.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara>a frame to encode</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-encode-parse-info" role="function">
<title>schro_encoder_encode_parse_info ()</title>
<indexterm zone="schro-encoder-encode-parse-info"><primary>schro_encoder_encode_parse_info</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_encode_parse_info     (<parameter><link linkend="SchroPack"><type>SchroPack</type></link> *bits</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> parse_code</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-pull" role="function">
<title>schro_encoder_pull ()</title>
<indexterm zone="schro-encoder-pull"><primary>schro_encoder_pull</primary></indexterm>
<programlisting><link linkend="SchroBuffer"><returnvalue>SchroBuffer</returnvalue></link> *       schro_encoder_pull                  (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *n_decodable_frames</parameter>);</programlisting>
<para>
Pulls a buffer of compressed video from the encoder.  If
<parameter>presentation_frame</parameter> is not NULL, the frame number of the
latest decodable frame is returned.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a buffer containing compressed video</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-analyse-picture" role="function">
<title>schro_encoder_analyse_picture ()</title>
<indexterm zone="schro-encoder-analyse-picture"><primary>schro_encoder_analyse_picture</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_analyse_picture       (<parameter><link linkend="SchroAsyncStage"><type>SchroAsyncStage</type></link> *stage</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-calculate-subband-weights" role="function">
<title>schro_encoder_calculate_subband_weights ()</title>
<indexterm zone="schro-encoder-calculate-subband-weights"><primary>schro_encoder_calculate_subband_weights</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_calculate_subband_weights
                                                        (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> (*perceptual_weight) (double)</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-calculate-test-info" role="function">
<title>schro_encoder_calculate_test_info ()</title>
<indexterm zone="schro-encoder-calculate-test-info"><primary>schro_encoder_calculate_test_info</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_calculate_test_info   (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-choose-quantisers" role="function">
<title>schro_encoder_choose_quantisers ()</title>
<indexterm zone="schro-encoder-choose-quantisers"><primary>schro_encoder_choose_quantisers</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_choose_quantisers     (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-clean-up-transform" role="function">
<title>schro_encoder_clean_up_transform ()</title>
<indexterm zone="schro-encoder-clean-up-transform"><primary>schro_encoder_clean_up_transform</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_clean_up_transform    (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-encode-auxiliary-data" role="function">
<title>schro_encoder_encode_auxiliary_data ()</title>
<indexterm zone="schro-encoder-encode-auxiliary-data"><primary>schro_encoder_encode_auxiliary_data</primary></indexterm>
<programlisting><link linkend="SchroBuffer"><returnvalue>SchroBuffer</returnvalue></link> *       schro_encoder_encode_auxiliary_data (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroAuxiliaryDataID"><type>SchroAuxiliaryDataID</type></link> id</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> size</parameter>);</programlisting>
<para>
Packs data into a Dirac auxiliary data packet.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a buffer</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-encode-end-of-stream" role="function">
<title>schro_encoder_encode_end_of_stream ()</title>
<indexterm zone="schro-encoder-encode-end-of-stream"><primary>schro_encoder_encode_end_of_stream</primary></indexterm>
<programlisting><link linkend="SchroBuffer"><returnvalue>SchroBuffer</returnvalue></link> *       schro_encoder_encode_end_of_stream  (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
Creates an end-of-stream packet.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a buffer</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-encode-lowdelay-transform-data" role="function">
<title>schro_encoder_encode_lowdelay_transform_data ()</title>
<indexterm zone="schro-encoder-encode-lowdelay-transform-data"><primary>schro_encoder_encode_lowdelay_transform_data</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_encode_lowdelay_transform_data
                                                        (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-encode-picture" role="function">
<title>schro_encoder_encode_picture ()</title>
<indexterm zone="schro-encoder-encode-picture"><primary>schro_encoder_encode_picture</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_encode_picture        (<parameter><link linkend="SchroAsyncStage"><type>SchroAsyncStage</type></link> *stage</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-encode-picture-header" role="function">
<title>schro_encoder_encode_picture_header ()</title>
<indexterm zone="schro-encoder-encode-picture-header"><primary>schro_encoder_encode_picture_header</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_encode_picture_header (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-encode-subband" role="function">
<title>schro_encoder_encode_subband ()</title>
<indexterm zone="schro-encoder-encode-subband"><primary>schro_encoder_encode_subband</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_encode_subband        (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> component</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> index</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-encode-subband-noarith" role="function">
<title>schro_encoder_encode_subband_noarith ()</title>
<indexterm zone="schro-encoder-encode-subband-noarith"><primary>schro_encoder_encode_subband_noarith</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_encode_subband_noarith
                                                        (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> component</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> index</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-engine-backref" role="function">
<title>schro_encoder_engine_backref ()</title>
<indexterm zone="schro-encoder-engine-backref"><primary>schro_encoder_engine_backref</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 schro_encoder_engine_backref        (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-engine-backtest" role="function">
<title>schro_encoder_engine_backtest ()</title>
<indexterm zone="schro-encoder-engine-backtest"><primary>schro_encoder_engine_backtest</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 schro_encoder_engine_backtest       (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-engine-intra-only" role="function">
<title>schro_encoder_engine_intra_only ()</title>
<indexterm zone="schro-encoder-engine-intra-only"><primary>schro_encoder_engine_intra_only</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 schro_encoder_engine_intra_only     (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-engine-lossless" role="function">
<title>schro_encoder_engine_lossless ()</title>
<indexterm zone="schro-encoder-engine-lossless"><primary>schro_encoder_engine_lossless</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 schro_encoder_engine_lossless       (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-engine-lowdelay" role="function">
<title>schro_encoder_engine_lowdelay ()</title>
<indexterm zone="schro-encoder-engine-lowdelay"><primary>schro_encoder_engine_lowdelay</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 schro_encoder_engine_lowdelay       (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-engine-test-intra" role="function">
<title>schro_encoder_engine_test_intra ()</title>
<indexterm zone="schro-encoder-engine-test-intra"><primary>schro_encoder_engine_test_intra</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 schro_encoder_engine_test_intra     (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-estimate-entropy" role="function">
<title>schro_encoder_estimate_entropy ()</title>
<indexterm zone="schro-encoder-estimate-entropy"><primary>schro_encoder_estimate_entropy</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_estimate_entropy      (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-frame-analyse" role="function">
<title>schro_encoder_frame_analyse ()</title>
<indexterm zone="schro-encoder-frame-analyse"><primary>schro_encoder_frame_analyse</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_frame_analyse         (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-frame-downsample" role="function">
<title>schro_encoder_frame_downsample ()</title>
<indexterm zone="schro-encoder-frame-downsample"><primary>schro_encoder_frame_downsample</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_frame_downsample      (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-frame-insert-buffer" role="function">
<title>schro_encoder_frame_insert_buffer ()</title>
<indexterm zone="schro-encoder-frame-insert-buffer"><primary>schro_encoder_frame_insert_buffer</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_frame_insert_buffer   (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>,
                                                         <parameter><link linkend="SchroBuffer"><type>SchroBuffer</type></link> *buffer</parameter>);</programlisting>
<para>
Inserts a buffer into an encoder frame.
</para><variablelist role="params">
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara>an encoder frame</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>a buffer</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-frame-new" role="function">
<title>schro_encoder_frame_new ()</title>
<indexterm zone="schro-encoder-frame-new"><primary>schro_encoder_frame_new</primary></indexterm>
<programlisting><link linkend="SchroEncoderFrame"><returnvalue>SchroEncoderFrame</returnvalue></link> * schro_encoder_frame_new             (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-frame-queue-get" role="function">
<title>schro_encoder_frame_queue_get ()</title>
<indexterm zone="schro-encoder-frame-queue-get"><primary>schro_encoder_frame_queue_get</primary></indexterm>
<programlisting><link linkend="SchroFrame"><returnvalue>SchroFrame</returnvalue></link> *        schro_encoder_frame_queue_get       (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroPictureNumber"><type>SchroPictureNumber</type></link> frame_number</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-frame-queue-remove" role="function">
<title>schro_encoder_frame_queue_remove ()</title>
<indexterm zone="schro-encoder-frame-queue-remove"><primary>schro_encoder_frame_queue_remove</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_frame_queue_remove    (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroPictureNumber"><type>SchroPictureNumber</type></link> frame_number</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-frame-ref" role="function">
<title>schro_encoder_frame_ref ()</title>
<indexterm zone="schro-encoder-frame-ref"><primary>schro_encoder_frame_ref</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_frame_ref             (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-frame-unref" role="function">
<title>schro_encoder_frame_unref ()</title>
<indexterm zone="schro-encoder-frame-unref"><primary>schro_encoder_frame_unref</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_frame_unref           (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-init-subbands" role="function">
<title>schro_encoder_init_subbands ()</title>
<indexterm zone="schro-encoder-init-subbands"><primary>schro_encoder_init_subbands</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_init_subbands         (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-insert-buffer" role="function">
<title>schro_encoder_insert_buffer ()</title>
<indexterm zone="schro-encoder-insert-buffer"><primary>schro_encoder_insert_buffer</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_insert_buffer         (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroBuffer"><type>SchroBuffer</type></link> *buffer</parameter>);</programlisting>
<para>
Inserts an application-provided buffer into the encoded video stream
with the next frame that is pushed.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>a buffer</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-output-push" role="function">
<title>schro_encoder_output_push ()</title>
<indexterm zone="schro-encoder-output-push"><primary>schro_encoder_output_push</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_output_push           (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroBuffer"><type>SchroBuffer</type></link> *buffer</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> slot</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> presentation_frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-perceptual-weight-ccir959" role="function">
<title>schro_encoder_perceptual_weight_ccir959 ()</title>
<indexterm zone="schro-encoder-perceptual-weight-ccir959"><primary>schro_encoder_perceptual_weight_ccir959</primary></indexterm>
<programlisting><link linkend="double"><returnvalue>double</returnvalue></link>              schro_encoder_perceptual_weight_ccir959
                                                        (<parameter><link linkend="double"><type>double</type></link> cpd</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-perceptual-weight-constant" role="function">
<title>schro_encoder_perceptual_weight_constant ()</title>
<indexterm zone="schro-encoder-perceptual-weight-constant"><primary>schro_encoder_perceptual_weight_constant</primary></indexterm>
<programlisting><link linkend="double"><returnvalue>double</returnvalue></link>              schro_encoder_perceptual_weight_constant
                                                        (<parameter><link linkend="double"><type>double</type></link> cpd</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-perceptual-weight-moo" role="function">
<title>schro_encoder_perceptual_weight_moo ()</title>
<indexterm zone="schro-encoder-perceptual-weight-moo"><primary>schro_encoder_perceptual_weight_moo</primary></indexterm>
<programlisting><link linkend="double"><returnvalue>double</returnvalue></link>              schro_encoder_perceptual_weight_moo (<parameter><link linkend="double"><type>double</type></link> cpd</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-postanalyse-picture" role="function">
<title>schro_encoder_postanalyse_picture ()</title>
<indexterm zone="schro-encoder-postanalyse-picture"><primary>schro_encoder_postanalyse_picture</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_postanalyse_picture   (<parameter><link linkend="SchroAsyncStage"><type>SchroAsyncStage</type></link> *stage</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-push-ready" role="function">
<title>schro_encoder_push_ready ()</title>
<indexterm zone="schro-encoder-push-ready"><primary>schro_encoder_push_ready</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 schro_encoder_push_ready            (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
Returns true if the encoder has available space for additional
video frames.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>TRUE if the encoder is ready for another video frame to
be pushed.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-recalculate-allocations" role="function">
<title>schro_encoder_recalculate_allocations ()</title>
<indexterm zone="schro-encoder-recalculate-allocations"><primary>schro_encoder_recalculate_allocations</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_recalculate_allocations
                                                        (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-reconstruct-picture" role="function">
<title>schro_encoder_reconstruct_picture ()</title>
<indexterm zone="schro-encoder-reconstruct-picture"><primary>schro_encoder_reconstruct_picture</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_reconstruct_picture   (<parameter><link linkend="SchroAsyncStage"><type>SchroAsyncStage</type></link> *stage</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-reference-get" role="function">
<title>schro_encoder_reference_get ()</title>
<indexterm zone="schro-encoder-reference-get"><primary>schro_encoder_reference_get</primary></indexterm>
<programlisting><link linkend="SchroEncoderFrame"><returnvalue>SchroEncoderFrame</returnvalue></link> * schro_encoder_reference_get         (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter><link linkend="SchroPictureNumber"><type>SchroPictureNumber</type></link> frame_number</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-set-default-subband-weights" role="function">
<title>schro_encoder_set_default_subband_weights ()</title>
<indexterm zone="schro-encoder-set-default-subband-weights"><primary>schro_encoder_set_default_subband_weights</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_set_default_subband_weights
                                                        (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-start" role="function">
<title>schro_encoder_start ()</title>
<indexterm zone="schro-encoder-start"><primary>schro_encoder_start</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_start                 (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
Locks in encoder configuration and causes the encoder to start
encoding pictures.  At this point, the encoder will start worker
threads to do the actual encoding.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-wait" role="function">
<title>schro_encoder_wait ()</title>
<indexterm zone="schro-encoder-wait"><primary>schro_encoder_wait</primary></indexterm>
<programlisting><link linkend="SchroStateEnum"><returnvalue>SchroStateEnum</returnvalue></link>      schro_encoder_wait                  (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
Checks the state of the encoder.  If the encoder requires the
application to do something, an appropriate state code is returned.
Otherwise, this function waits until the encoder requires the
application to do something.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a state code</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-get-n-settings" role="function">
<title>schro_encoder_get_n_settings ()</title>
<indexterm zone="schro-encoder-get-n-settings"><primary>schro_encoder_get_n_settings</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 schro_encoder_get_n_settings        (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-get-setting-info" role="function">
<title>schro_encoder_get_setting_info ()</title>
<indexterm zone="schro-encoder-get-setting-info"><primary>schro_encoder_get_setting_info</primary></indexterm>
<programlisting>const <link linkend="SchroEncoderSetting"><returnvalue>SchroEncoderSetting</returnvalue></link> * schro_encoder_get_setting_info
                                                        (<parameter><link linkend="int"><type>int</type></link> i</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-global-estimation" role="function">
<title>schro_encoder_global_estimation ()</title>
<indexterm zone="schro-encoder-global-estimation"><primary>schro_encoder_global_estimation</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_global_estimation     (<parameter><link linkend="SchroEncoderFrame"><type>SchroEncoderFrame</type></link> *frame</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-init-error-tables" role="function">
<title>schro_encoder_init_error_tables ()</title>
<indexterm zone="schro-encoder-init-error-tables"><primary>schro_encoder_init_error_tables</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_init_error_tables     (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-phasecorr-estimation" role="function">
<title>schro_encoder_phasecorr_estimation ()</title>
<indexterm zone="schro-encoder-phasecorr-estimation"><primary>schro_encoder_phasecorr_estimation</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_phasecorr_estimation  (<parameter><link linkend="SchroPhaseCorr"><type>SchroPhaseCorr</type></link> *pc</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="schro-encoder-setting-get-double" role="function">
<title>schro_encoder_setting_get_double ()</title>
<indexterm zone="schro-encoder-setting-get-double"><primary>schro_encoder_setting_get_double</primary></indexterm>
<programlisting><link linkend="double"><returnvalue>double</returnvalue></link>              schro_encoder_setting_get_double    (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the current value of an encoder option given by <parameter>name</parameter></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="schro-encoder-setting-set-double" role="function">
<title>schro_encoder_setting_set_double ()</title>
<indexterm zone="schro-encoder-setting-set-double"><primary>schro_encoder_setting_set_double</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                schro_encoder_setting_set_double    (<parameter><link linkend="SchroEncoder"><type>SchroEncoder</type></link> *encoder</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> d</parameter>);</programlisting>
<para>
set the encoder option given by <parameter>name</parameter> to <parameter>value</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>encoder</parameter>&#160;:</term>
<listitem><simpara>an encoder object</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
